//! Do not edit by hand.
//! Auto-generated handler for {{ endpoint }} endpoint.

use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::error::Error;
use utoipa::ToSchema;

/// Auto-generated parameters struct for `/{{ endpoint }}` endpoint.
/// Spec: {{ spec_file_name | default(value="") }}
#[derive(Clone, Debug, Default, Deserialize, Serialize, JsonSchema, ToSchema)]
pub struct {{ parameters_type }} {
    {% for p in parameters %}{%- if p.description %}
    #[schemars(description = r#"{{ p.description }}"#)]
    {%- endif %}
    pub {{ p.name }}: Option<{{ p.rust_type }}>,
    {%- endfor %}
}

// Implement parameter conversion
impl {{ parameters_type }} {
    /// Convert parameters to query string map
    pub fn to_query_params(&self) -> HashMap<String, String> {
        let mut query = HashMap::new();
        {% for p in parameters %}
        if let Some(val) = &self.{{ p.name }} {
            query.insert("{{ p.name }}".to_string(), val.to_string());
        }
        {%- endfor %}
        query
    }
}

/// Auto-generated properties struct for `/{{ endpoint }}` endpoint.
/// Spec: {{ spec_file_name | default(value="") }}
#[derive(Clone, Debug, Default, Deserialize, Serialize, JsonSchema, ToSchema)]
pub struct {{ properties_type }} {
{%- for prop in properties %}
    #[schemars(description = r#"{{ prop.title }} - {{ prop.description }}"#)]
    pub {{ prop.name }}: Option<{{ prop.rust_type }}>,
{% endfor %}
}

#[derive(Clone, Debug, Serialize, Deserialize, JsonSchema, ToSchema)]
pub struct {{ endpoint_cap }}Response {
    {% if response_type %}
    #[schemars(description = "Response data")]
    pub data: {{ response_type }},
    {% else %}
    #[schemars(description = "Response data")]
    pub data: serde_json::Value,
    {% endif %}
}

/// {{ endpoint }} endpoint handler
/// {{ summary }}
{% if description -%}
/// {{ description }}
{%- endif %}
{% if parameters -%}
#[doc = r#"{% for p in parameters %}{%- if p.name %} - `{{ p.name }}` ({{ p.rust_type }}, optional): {{ p.description | trim }}{% if p.example %}
{{ p.example }}{% endif %}{% endif %}{% endfor %}"#]
{%- endif %}
#[doc = r#"Verb: {{ method }}
Path: /{{ endpoint }}
Parameters: {{ parameters_type }}
Responses:
    200: Successful Operation
    400: Bad Request
    500: Internal Server Error
Tag: {{ tags.0 }}"#]
pub async fn {{ endpoint }}_handler(params: &{{ parameters_type }}) -> Result<{{ endpoint_cap }}Response, Error> {
    // TODO: Implement the actual API call
    // This is just a placeholder that returns an empty response
    Ok({{ endpoint_cap }}Response {
        {% if response_type %}
        data: Default::default(),
        {% else %}
        data: serde_json::json!({}),
        {% endif %}
    })
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json;
    
    #[test]
    fn test_parameters_struct_serialization() {
        let params = {{ parameters_type }} {
            {% for p in parameters %}
            {{ p.name }}: None,
            {%- endfor %}
        };
        let _ = serde_json::to_string(&params).unwrap();
    }

    #[test]
    fn test_properties_struct_serialization() {
        let props = {{ properties_type }} {
            {% for prop in properties %}{{ prop.name }}: None,
            {% endfor -%}
        };
        let _ = serde_json::to_string(&props).unwrap();
    }
}
