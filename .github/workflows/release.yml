name: Release
run-name: ${{ startsWith(github.ref,'refs/tags/') && format('ðŸš€ Release {0} ðŸ¤–', github.ref_name) || 'ðŸš€ Release PR Update ðŸ¤–' }}

on:
  push:
    # Run PR update job on any branch push; release job gated by tags
    branches: ["**"]
    tags: ["v*.*.*"]

permissions:
  contents: write     # commit changelog & Cargo.toml bumps
  pull-requests: write
  id-token: write     # needed for crates.io publish via OIDC

env:
  CARGO_TERM_COLOR: always

jobs:
  release-plz-release:
    name: Release-plz release
    # Run only when a version tag (vX.Y.Z) is pushed
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run release-plz (release)
        uses: release-plz/action@v0.5.107
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-plz-pr:
    name: Release-plz PR
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run release-plz (PR)
        uses: release-plz/action@v0.5.107
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build binaries
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: agenterra
            asset_name: agenterra-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: agenterra
            asset_name: agenterra-linux-aarch64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: agenterra
            asset_name: agenterra-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: agenterra
            asset_name: agenterra-macos-aarch64.tar.gz

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p ~/.cargo
        echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

    - name: Build binaries
      run: |
        cargo build --release --target ${{ matrix.target }} --bin agenterra
        cargo build --release --target ${{ matrix.target }} --bin agnt

    - name: Strip binaries (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        strip target/${{ matrix.target }}/release/agnt

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }} ${{ matrix.binary_name }} agnt
        cd -

    - name: Generate checksums
      run: |
        sha256sum ${{ matrix.asset_name }} >> checksums-${{ matrix.target }}.txt

    - name: Upload Release Assets
      run: |
        gh release upload ${{ github.ref_name }} ${{ matrix.asset_name }} checksums-${{ matrix.target }}.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}