name: Publish & Release
run-name: ${{ format('ðŸš€ Publish & Release {0}', github.ref_name) }}

on:
  push:
    tags: ["v*.*.*"]   # Run only on tag pushes

permissions:
  contents: write     # commit changelog & Cargo.toml bumps
  pull-requests: write
  id-token: write     # needed for crates.io publish via OIDC

env:
  CARGO_TERM_COLOR: always

jobs:
  release-plz-pr:
    name: Release-plz PR
    # Skip bot commits to prevent loops
    if: >
      github.ref == 'refs/heads/main' &&
      github.actor != 'release-plz[bot]'
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-pr
      cancel-in-progress: true  # Cancel previous runs on new pushes
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run release-plz (PR)
        uses: release-plz/action@v0.5.107
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Publish & Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    if: startsWith(github.ref, 'refs/tags/')
    needs: release  # Wait for publish
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            asset_name: agenterra-linux-x86_64.tar.gz
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            asset_name: agenterra-linux-aarch64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: agenterra-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: agenterra-macos-aarch64.tar.gz

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install musl-related tools
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]; then
            # x86_64 musl setup
            rustup target add x86_64-unknown-linux-musl
            echo "CC_x86_64_unknown_linux_musl=musl-gcc" >> $GITHUB_ENV
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV
          elif [ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]; then
            # aarch64 musl setup
            sudo apt-get install -y gcc-aarch64-linux-gnu
            rustup target add aarch64-unknown-linux-musl
            echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --bin agenterra

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          strip target/${{ matrix.target }}/release/agenterra

      - name: Create release assets
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }} agenterra
          cd - >/dev/null
          shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256

      - name: Get release upload URL
        id: get_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.GITHUB_REF.replace('refs/tags/', '')
            });
            return release.upload_url;

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/gzip

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: ${{ matrix.asset_name }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain