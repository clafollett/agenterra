name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc
        default: 'patch'
      custom_version:
        description: 'Custom version (overrides release_type, e.g., 1.2.3)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-release
      run: cargo install cargo-release

    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          echo "VERSION=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=custom" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        fi

    - name: Run cargo-release (custom version)
      if: steps.version.outputs.RELEASE_TYPE == 'custom'
      id: release_custom
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        cargo release --workspace --execute --no-confirm "$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Run cargo-release (semantic)
      if: steps.version.outputs.RELEASE_TYPE != 'custom'
      id: release_semantic
      run: |
        RELEASE_TYPE="${{ steps.version.outputs.RELEASE_TYPE }}"
        cargo release --workspace --execute --no-confirm "$RELEASE_TYPE"
        
        # Get the new version from Cargo.toml
        VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "agenterra-cli") | .version')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Set release output
      id: release
      run: |
        if [ "${{ steps.version.outputs.RELEASE_TYPE }}" == "custom" ]; then
          echo "version=${{ steps.release_custom.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag=${{ steps.release_custom.outputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.release_semantic.outputs.version }}" >> $GITHUB_OUTPUT  
          echo "tag=${{ steps.release_semantic.outputs.tag }}" >> $GITHUB_OUTPUT
        fi

  create-release:
    name: Create Release
    needs: [semantic-release]
    if: always() && (needs.semantic-release.result == 'success' || github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag or semantic release
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ needs.semantic-release.outputs.version }}" >> $GITHUB_OUTPUT
          echo "TAG=${{ needs.semantic-release.outputs.tag }}" >> $GITHUB_OUTPUT
        else
          # Push event with tag
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${TAG_VERSION#v}" >> $GITHUB_OUTPUT
          echo "TAG=$TAG_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - can be enhanced later
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in ${{ steps.version.outputs.TAG }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Features and Improvements" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        release_name: Agenterra ${{ steps.version.outputs.TAG }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.TAG, '-') }}

  build:
    name: Build binaries
    needs: create-release
    if: always() && (needs.create-release.result == 'success')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: agenterra
            asset_name: agenterra-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: agenterra
            asset_name: agenterra-linux-aarch64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: agenterra
            asset_name: agenterra-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: agenterra
            asset_name: agenterra-macos-aarch64.tar.gz

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

    - name: Build binaries
      run: |
        cargo build --release --target ${{ matrix.target }} --bin agenterra
        cargo build --release --target ${{ matrix.target }} --bin agnt

    - name: Strip binaries
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        strip target/${{ matrix.target }}/release/agnt

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }} ${{ matrix.binary_name }} agnt
        cd -


    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  checksums:
    name: Generate checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate checksums
      run: |
        for file in *.tar.gz; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain