//! {{ project_name | default(value="MCP Client") }}
//!
//! {{ description | default(value="Interactive MCP client with REPL interface for tool discovery and invocation") }}
//! Version: {{ version | default(value="0.1.0") }}
//! Author: {{ author | default(value="Generated by Agenterra") }}

// Core modules
mod auth;
mod cache;
mod client;
mod config;
mod error;
mod registry;
mod repl;
mod resource;
mod result;
mod session_manager;
mod transport;

// Optional modules
{% if include_cli | default(value=false) %}mod cli;{% endif %}
{% if include_headless | default(value=false) %}mod headless;{% endif %}

use anyhow::Result;
use clap::Parser;
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};

use crate::client::McpClient;
use crate::repl::McpRepl;

#[derive(Parser)]
#[command(name = "{{ cli_binary_name | default(value="mcp-client") }}")]
#[command(about = "{{ cli_description | default(value="Interactive MCP client for tool discovery and invocation") }}")]
#[command(version = "{{ version | default(value="0.1.0") }}")]
struct Cli {
    /// MCP server command to run (path to server binary)
    #[arg(short, long)]
    server: String,
    
    /// Enable debug logging
    #[arg(short, long)]
    debug: bool,
    
    /// Connect timeout in seconds
    #[arg(short, long, default_value = "{{ default_timeout_seconds | default(value="10") }}")]
    timeout: u64,
    
    /// Log level (trace, debug, info, warn, error)
    #[arg(long, default_value = "{{ default_log_level | default(value="info") }}")]
    log_level: String,
}

#[tokio::main]
async fn main() -> Result<()> {
    let cli = Cli::parse();
    
    // Initialize logging with configurable level
    let log_level = if cli.debug { "debug" } else { &cli.log_level };
    tracing_subscriber::registry()
        .with(
            tracing_subscriber::EnvFilter::try_from_default_env()
                .unwrap_or_else(|_| format!("{{ project_name | default(value="mcp_client") }}={}", log_level).into()),
        )
        .with(tracing_subscriber::fmt::layer())
        .init();

    tracing::info!("Starting {{ project_name | default(value="MCP Client") }} v{}", "{{ version | default(value="0.1.0") }}");
    tracing::info!("Connecting to MCP server: {}", cli.server);

    // Create and connect MCP client with configurable timeout
    let mut client = McpClient::new_with_timeout(cli.timeout).await?;
    
    tracing::debug!("Client configuration: timeout={}s, debug={}", cli.timeout, cli.debug);
    
    // Start the server process and connect via stdio
    tracing::info!("Starting MCP server: {}", cli.server);
    let command = tokio::process::Command::new(&cli.server);
    client.connect_stdio(command).await?;
    
    tracing::info!("Connected to MCP server successfully");
    
    // Start REPL interface
    let mut repl = McpRepl::new(client);
    repl.run().await?;

    Ok(())
}