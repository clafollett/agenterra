//! {{ project_name }} - A robust Model Context Protocol client library
//!
//! {{ description }}
//! - Secure authentication and credential management
//! - Advanced caching and resource management  
//! - Tool registry with JSON Schema validation
//! - Multi-session architecture for future expansion
//! - Enhanced error handling and result processing
//!
//! Version: {{ version }}

// Domain layer - Core business logic
pub mod domain {
    pub mod client;
    pub mod capabilities;
    pub mod connection;
    pub mod operations;
}

// Infrastructure layer - External dependencies
pub mod infrastructure {
    pub mod error;
    pub mod transport;
    pub mod database {
        pub mod manager;
        pub mod migrations;
    }
    pub mod cache {
        pub mod resource_cache;
    }
}

// Application layer - Use cases and services  
pub mod application {
    pub mod auth;
    pub mod config;
    pub mod registry;
    pub mod result;
    pub mod session_manager;
    pub mod validation_config;
    pub mod validation;
}

// API layer - DTOs and external interfaces
pub mod api {
    pub mod resource;
}

// UI layer - User interfaces
pub mod ui {
    pub mod headless;
    pub mod repl;
}

// CLI integration
pub mod cli;

// Test utilities (available during testing and in dev-dependencies)
#[cfg(any(test, feature = "test-utils"))]
pub mod test_utils;

// Re-export main types for convenient access
pub use application::auth::{AuthConfig, AuthMethod, CredentialType, SecureCredential};
pub use infrastructure::cache::resource_cache::{CacheAnalytics, CacheConfig, CachedResource, ResourceCache};
pub use domain::client::McpClient;
pub use domain::capabilities::DiscoveredCapabilities;
pub use domain::connection::{ConnectionConfig, ConnectionConfigBuilder, ConnectionState};
pub use domain::operations::OperationTimeouts;
pub use application::config::{ConfigManager, ServerProfile, AuthCredential, SessionHistory};
pub use infrastructure::database::manager::{DatabaseManager, DatabaseConfig};
pub use infrastructure::error::{ClientError, Result};
pub use ui::headless::{HeadlessRunner, ServerStatus, ExitCode};
pub use application::registry::{ToolInfo, ToolRegistry};
pub use api::resource::{ResourceContent, ResourceInfo};
pub use application::result::{ContentType, ToolResult};
pub use application::session_manager::McpSessionManager;
pub use application::validation::InputValidator;
pub use infrastructure::transport::{Transport, TransportProtocol};

/// Current version of the {{ project_name }}
pub const VERSION: &str = env!("CARGO_PKG_VERSION");

/// Default timeout for MCP operations
pub const DEFAULT_TIMEOUT_SECS: u64 = 60;

/// Maximum number of retries for failed operations
pub const DEFAULT_MAX_RETRIES: u32 = 3;

/// Default cache TTL in seconds
pub const DEFAULT_CACHE_TTL_SECS: u64 = 300;

/// Maximum tools in registry
pub const MAX_TOOLS_IN_REGISTRY: usize = 1000;

/// MCP Protocol version
pub const MCP_PROTOCOL_VERSION: &str = "2025-06-18";