//! Connection-related domain types
//!
//! Contains value objects for managing MCP client connections.

use crate::{DEFAULT_TIMEOUT_SECS};
use crate::application::auth::AuthConfig;
use crate::infrastructure::cache::resource_cache::CacheConfig;
use crate::infrastructure::error::{ClientError, Result};
use std::time::Duration;

/// Connection state for MCP client (Value Object)
#[derive(Debug, Clone, PartialEq)]
pub enum ConnectionState {
    Disconnected,
    Connecting,
    Connected,
    Failed(String),
}

/// Connection configuration (Value Object with Builder Pattern)
#[derive(Debug, Clone)]
pub struct ConnectionConfig {
    command: String,
    args: Vec<String>,
    timeout: Duration,
    auth: Option<AuthConfig>,
    cache: Option<CacheConfig>,
}

impl ConnectionConfig {
    pub fn builder() -> ConnectionConfigBuilder {
        ConnectionConfigBuilder::new()
    }

    pub fn command(&self) -> &str {
        &self.command
    }

    pub fn args(&self) -> &Vec<String> {
        &self.args
    }

    pub fn timeout(&self) -> Duration {
        self.timeout
    }

    pub fn auth(&self) -> Option<&AuthConfig> {
        self.auth.as_ref()
    }

    pub fn cache(&self) -> Option<&CacheConfig> {
        self.cache.as_ref()
    }
}

/// Builder for ConnectionConfig (following DDD patterns)
#[derive(Debug, Default)]
pub struct ConnectionConfigBuilder {
    command: Option<String>,
    args: Option<Vec<String>>,
    timeout: Option<Duration>,
    auth: Option<AuthConfig>,
    cache: Option<CacheConfig>,
}

impl ConnectionConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn command<S: Into<String>>(mut self, command: S) -> Self {
        self.command = Some(command.into());
        self
    }

    pub fn args(mut self, args: Vec<String>) -> Self {
        self.args = Some(args);
        self
    }

    pub fn timeout(mut self, timeout: Duration) -> Self {
        self.timeout = Some(timeout);
        self
    }

    pub fn auth(mut self, auth: AuthConfig) -> Self {
        self.auth = Some(auth);
        self
    }

    pub fn cache(mut self, cache: CacheConfig) -> Self {
        self.cache = Some(cache);
        self
    }

    pub fn build(self) -> Result<ConnectionConfig> {
        let command = self
            .command
            .ok_or_else(|| ClientError::Validation("Connection command is required".to_string()))?;

        if command.trim().is_empty() {
            return Err(ClientError::Validation(
                "Command cannot be empty".to_string(),
            ));
        }

        // Use provided timeout or default
        let timeout = self.timeout.unwrap_or_else(|| Duration::from_secs(DEFAULT_TIMEOUT_SECS));

        if timeout.is_zero() {
            return Err(ClientError::Validation(
                "Timeout must be greater than zero".to_string(),
            ));
        }

        Ok(ConnectionConfig {
            command,
            args: self.args.unwrap_or_default(),
            timeout,
            auth: self.auth,
            cache: self.cache,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_connection_state() {
        let state = ConnectionState::Disconnected;
        assert_eq!(state, ConnectionState::Disconnected);
        
        let failed = ConnectionState::Failed("error".to_string());
        match failed {
            ConnectionState::Failed(msg) => assert_eq!(msg, "error"),
            _ => panic!("Wrong state"),
        }
    }

    #[test]
    fn test_connection_config_builder() {
        let config = ConnectionConfigBuilder::new()
            .command("mcp-server")
            .args(vec!["--port".to_string(), "8080".to_string()])
            .timeout(Duration::from_secs(30))
            .build()
            .unwrap();
        
        assert_eq!(config.command(), "mcp-server");
        assert_eq!(config.args().len(), 2);
        assert_eq!(config.timeout(), Duration::from_secs(30));
    }
    
    #[test]
    fn test_empty_command_fails() {
        let result = ConnectionConfigBuilder::new()
            .command("")
            .build();
        
        assert!(result.is_err());
    }
}