# {{ project_name }}

{{ description }}

## Features

- üéØ **Interactive REPL** - Explore and test MCP servers interactively
- ü§ñ **Headless Mode** - Automate MCP operations for CI/CD and scripting
- üíæ **Configuration Management** - SQLite-based server profiles and preferences
- üîê **Authentication** - Secure credential storage (coming soon)
- üìä **Resource Caching** - SQLite-powered caching with analytics
- üìà **Session History** - Track tool usage and performance metrics
- üîÑ **Multi-Server Support** - Save and switch between server profiles

## Installation

```bash
cargo build --release
```

## Usage

### Interactive Mode (Default)

Start with a direct server path:
```bash
{{ cli_binary_name }} --server /path/to/mcp-server
```

Use a saved server profile:
```bash
{{ cli_binary_name }} --profile my-server
```

Use the default server:
```bash
{{ cli_binary_name }}
```

### Server Management

Add a server profile:
```bash
# Basic usage with positional arguments
{{ cli_binary_name }} server add my-server /path/to/server arg1 arg2 \
  --description "My MCP server" \
  --set-default

# With SSE transport
{{ cli_binary_name }} server add web-server https://api.example.com/mcp \
  --transport sse \
  --description "Web-based MCP server"

# With environment variables and disabled tools
{{ cli_binary_name }} server add custom-server /path/to/server \
  --env '{"API_KEY": "secret"}' \
  --disabled-tools "dangerous-tool,debug-tool" \
  --timeout 30
```

List server profiles:
```bash
{{ cli_binary_name }} server list
```

Get server details:
```bash
{{ cli_binary_name }} server get my-server
```

Set default server:
```bash
{{ cli_binary_name }} server set-default my-server
```

Remove a server:
```bash
{{ cli_binary_name }} server remove my-server
```

Add server from JSON:
```bash
{{ cli_binary_name }} server add-json my-server '{
  "command": "/path/to/server",
  "args": ["arg1", "arg2"],
  "transport": "sse",
  "timeout": 30
}'
```

Export configuration:
```bash
{{ cli_binary_name }} server export > servers.json
```

Import configuration:
```bash
{{ cli_binary_name }} server import servers.json
```

### Headless Mode (Automation)

Run a tool with the `run` command:
```bash
# Using a direct server path
{{ cli_binary_name }} run tool-name --args '{"param": "value"}' --server /path/to/server

# Using a saved profile
{{ cli_binary_name }} run tool-name --args '{"param": "value"}' --profile my-server

# Using the default server
{{ cli_binary_name }} run tool-name --args '{"param": "value"}'

# Without arguments
{{ cli_binary_name }} run tool-name --server /path/to/server
```

The run command will:
- Connect to the specified MCP server
- Call the specified tool with the provided arguments
- Print the result as JSON to stdout
- Exit with appropriate status codes (0 for success, non-zero for errors)


### Server-Sent Events (SSE) Transport

The client supports connecting to MCP servers via SSE transport for web-based servers:

```bash
# Connect to an SSE server in interactive mode
{{ cli_binary_name }} --transport sse --sse-url https://api.example.com/mcp

# Use SSE transport in headless mode
{{ cli_binary_name }} run tool-name --args '{"param": "value"}' \
  --transport sse \
  --sse-url https://api.example.com/mcp

# Configure SSE transport in server profiles
{{ cli_binary_name }} server add web-server https://api.example.com/mcp \
  --transport sse \
  --description "Web-based MCP server"
```

The SSE transport automatically handles:
- Connection to `/sse` endpoint for event stream
- POST requests to `/message` endpoint for client messages
- Automatic reconnection with exponential backoff
- Full MCP protocol support over HTTP
- Support for both interactive and headless modes

When using SSE transport with profiles, the command field should contain the base URL (without `/sse` or `/message` suffixes).

### REPL Commands

When in interactive mode, these commands are available:

- `help` or `h` - Show available commands
- `tools` or `t` - List available tools
- `call <tool> <args>` or `c` - Call a tool with JSON arguments
- `resources` or `r` - List available resources
- `get <uri>` or `g` - Get a specific resource
- `prompts` or `p` - List available prompts
- `prompt <name>` - Get a specific prompt
- `status` or `s` - Show connection status
- `quit` or `q` - Exit the REPL

## Configuration Files

Configuration is stored in SQLite databases:

- **Config Database**: `~/.config/agenterra/{{ project_name }}_config.db`
  - Server profiles (with transport, environment, disabled tools)
  - User preferences
  - Authentication credentials (encrypted)
  - Session history

- **Cache Database**: `~/.cache/agenterra/{{ project_name }}_cache.db`
  - Cached resources
  - Cache analytics
  - Performance metrics

## Environment Variables

- `AGENTERRA_OUTPUT_DIR` - Override default output directory
- `AGENTERRA_TEMPLATE_DIR` - Override template directory
- `RUST_LOG` - Set logging level (e.g., `debug`, `info`, `warn`)

## Exit Codes

For scripting and automation:

- `0` - Success
- `1` - Connection failed
- `2` - Tool call failed
- `3` - Invalid arguments
- `4` - Configuration error
- `255` - Unknown error

## Examples

### Automation Script

```bash
#!/bin/bash
# Get server details
{{ cli_binary_name }} server get my-server

# Run a tool and check result
if {{ cli_binary_name }} run process-data --args '{"file": "data.csv"}' --profile my-server; then
    echo "Processing succeeded"
else
    echo "Processing failed with code $?"
fi
```

### CI/CD Integration

```yaml
# GitHub Actions example
- name: Run MCP Tools
  run: |
    {{ cli_binary_name }} server add ci-server {% raw %}${{ secrets.MCP_SERVER_PATH }}{% endraw %} \
      --transport stdio \
      --set-default
    
    {{ cli_binary_name }} run list-tools --profile ci-server
    {{ cli_binary_name }} run deploy --args '{"version": "{% raw %}${{ github.sha }}{% endraw %}"}' --profile ci-server
```

## Advanced Features

### Resource Caching

The client includes an SQLite-powered resource cache with connection pooling:

- **Connection Pool**: 1-10 connections with 5-minute lifetime
- **Cache TTL**: Configurable per resource (default: 1 hour)
- **Analytics**: Track hit rates, access patterns, and performance
- **Auto-cleanup**: Expired resources cleaned up automatically

### Session Tracking

All client sessions are tracked in the configuration database:

- Tool call history with arguments and results
- Performance metrics (duration, success/failure)
- Error tracking and debugging information
- Session analytics for usage patterns

## Development

Run tests:
```bash
cargo test
```

Build with all features:
```bash
cargo build --release --all-features
```

Run with verbose logging:
```bash
RUST_LOG=debug {{ cli_binary_name }} --server /path/to/server
```

Format code:
```bash
cargo fmt
```

Lint code:
```bash
cargo clippy
```

## Dependencies

### Core Dependencies
- **rmcp**: Official MCP protocol SDK
- **tokio**: Async runtime
- **clap**: Command-line argument parsing
- **rustyline**: Interactive REPL

### Storage & Configuration
- **rusqlite**: SQLite database engine
- **r2d2**: Connection pooling
- **chrono**: Date/time handling
- **uuid**: Unique identifiers

### Serialization & Security
- **serde**: Serialization framework
- **serde_json**: JSON support
- **zeroize**: Secure memory handling
- **base64-simd**: Fast base64 encoding

## Publishing Limitation

‚ö†Ô∏è **Important**: This project uses git dependencies and cannot be published to crates.io in its current form.

The `rmcp` dependency is referenced directly from the official ModelContextProtocol GitHub repository. To publish to crates.io:

1. Wait for an official `rmcp` release on crates.io
2. Or vendor the dependencies locally
3. Or use alternative MCP implementations

## License

{{ license }}

## Contributing

Contributions are welcome! Please submit pull requests or open issues.