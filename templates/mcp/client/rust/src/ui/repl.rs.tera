//! Interactive REPL interface for MCP client

use crate::infrastructure::error::Result;
use rustyline::error::ReadlineError;
use rustyline::DefaultEditor;
use serde_json::{json, Value};
use tracing::{debug, error, info};
use async_trait::async_trait;

use crate::domain::client::McpClient;

/// Permission response from user input
#[derive(Debug, Clone, PartialEq)]
pub enum PermissionResponse {
    Execute,    // 'y' - execute once
    Always,     // 'always'/'a' - add to always_allowed and execute
    Deny,       // 'n' - skip execution
}

impl PermissionResponse {
    /// Parse user input into a PermissionResponse
    pub fn parse_user_input(input: &str) -> Result<Self> {
        match input.to_lowercase().trim() {
            "y" | "yes" => Ok(PermissionResponse::Execute),
            "n" | "no" => Ok(PermissionResponse::Deny),
            "a" | "always" => Ok(PermissionResponse::Always),
            _ => Err(crate::infrastructure::error::ClientError::Client(format!(
                "Invalid response '{input}'. Please enter y/yes, n/no, or a/always"
            ))),
        }
    }
}

/// Trait for prompting user permission (allows mocking in tests)
#[async_trait]
pub trait PermissionPrompter {
    async fn prompt_user_permission(&mut self, tool_name: &str, args: &Value) -> Result<PermissionResponse>;
}

/// REPL interface for MCP client
pub struct McpRepl {
    client: McpClient,
    editor: DefaultEditor,
    session_id: Option<String>,
    server_name: String,
}

impl McpRepl {
    /// Create a new REPL instance
    pub fn new(client: McpClient, server_name: String) -> Self {
        let editor = DefaultEditor::new().expect("Failed to create readline editor");
        
        Self { 
            client, 
            editor,
            session_id: None,
            server_name,
        }
    }
    
    /// Set the session ID for tracking
    pub fn set_session_id(&mut self, session_id: String) {
        self.session_id = Some(session_id);
    }

    /// Run the interactive REPL
    pub async fn run(&mut self) -> Result<()> {
        info!("Starting MCP client REPL interface");
        println!("{{ project_name }} - Interactive REPL");
        println!("Type '/help' for available commands, '/quit' to exit");
        println!();

        self.show_capabilities().await;

        loop {
            let readline = self.editor.readline("mcp> ");
            match readline {
                Ok(line) => {
                    let line = line.trim();
                    if line.is_empty() {
                        continue;
                    }

                    self.editor.add_history_entry(line).ok();

                    match self.handle_command(line).await {
                        Ok(should_continue) => {
                            if !should_continue {
                                break;
                            }
                        }
                        Err(e) => {
                            error!("REPL command failed: {}", e);
                        }
                    }
                }
                Err(ReadlineError::Interrupted) => {
                    println!("Use /exit or /quit to exit the REPL");
                }
                Err(ReadlineError::Eof) => {
                    break;
                }
                Err(err) => {
                    error!("Readline error: {:?}", err);
                    break;
                }
            }
        }

        println!("Goodbye!");
        info!("Shutting down MCP client REPL");
        self.client.disconnect().await?;
        Ok(())
    }

    /// Handle a command from the REPL
    async fn handle_command(&mut self, command: &str) -> Result<bool> {
        let parts: Vec<&str> = command.split_whitespace().collect();
        if parts.is_empty() {
            return Ok(true);
        }

        debug!("Processing REPL command: {}", parts[0]);

        match parts[0] {
            "/help" => {
                self.show_help();
            }
            "/capabilities" => {
                self.show_capabilities().await;
            }
            "/call-tool" => {
                if parts.len() < 2 {
                    println!("Usage: call-tool <tool_name> [arguments_json]");
                } else {
                    let tool_name = parts[1];
                    let args = if parts.len() > 2 {
                        let args_str = parts[2..].join(" ");
                        serde_json::from_str(&args_str).unwrap_or_else(|_| json!({}))
                    } else {
                        json!({})
                    };
                    
                    self.call_tool(tool_name, args).await?;
                }
            }
            "/get-prompt" => {
                if parts.len() < 2 {
                    println!("Usage: get-prompt <prompt_name> [arguments_json]");
                } else {
                    let prompt_name = parts[1];
                    let args = if parts.len() > 2 {
                        let args_str = parts[2..].join(" ");
                        Some(serde_json::from_str(&args_str).unwrap_or_else(|_| json!({})))
                    } else {
                        None
                    };
                    
                    self.get_prompt(prompt_name, args).await?;
                }
            }
            "/get-resource" => {
                if parts.len() < 2 {
                    println!("Usage: get-resource <resource_uri>");
                } else {
                    let uri = parts[1];
                    self.get_resource(uri).await?;
                }
            }
            "/list-prompts" => {
                self.list_prompts().await;
            }
            "/list-resources" => {
                self.list_resources().await;
            }
            "/list-tools" => {
                self.list_tools().await;
            }
            "/clear" => {
                print!("\x1B[2J\x1B[1;1H");
            }
            "/status" => {
                self.status().await;
            }
            "/exit" | "/quit" => {
                return Ok(false);
            }
            _ => {
                println!("Unknown command: {}. Type '/help' for available commands.", parts[0]);
            }
        }

        Ok(true)
    }

    /// Show available capabilities
    async fn show_capabilities(&mut self) {
        let tools = match self.client.list_tools().await {
            Ok(tools) => tools,
            Err(e) => {
                error!("Failed to list tools: {}", e);
                vec![]
            }
        };
        let resources = match self.client.list_resources().await {
            Ok(resources) => resources,
            Err(e) => {
                error!("Failed to list resources: {}", e);
                vec![]
            }
        };
        let prompts = match self.client.list_prompts().await {
            Ok(prompts) => prompts,
            Err(e) => {
                error!("Failed to list prompts: {}", e);
                vec![]
            }
        };

        println!("Connected to: {}", self.server_name);
        if let Some(version) = self.client.server_version() {
            println!("Server version: {}", version);
        }
        println!();
        println!("Server Capabilities:");
        println!("  Tools: {}", tools.len());
        println!("  Resources: {}", resources.len());
        println!("  Prompts: {}", prompts.len());
        println!();
    }

    /// Show help message
    fn show_help(&self) {
        println!("Available commands:");
        println!("  /help            - Show this help message");
        println!("  /capabilities    - Show server capabilities summary");
        println!("  /call-tool <tool> [args]     - Call a tool with optional JSON arguments");
        println!("  /get-prompt <name> [args]    - Get a prompt with optional JSON arguments");
        println!("  /get-resource <uri>          - Get a resource by URI");
        println!("  /list-prompts    - List available prompts");
        println!("  /list-resources  - List available resources");
        println!("  /list-tools      - List available tools");
        println!("  /clear           - Clear screen");
        println!("  /status          - Show connection status");
        println!("  /quit, /exit     - Exit the REPL");
        println!();
        println!("Tool Permission System:");
        println!("  When calling tools, you may be prompted for permission:");
        println!("  • (y)es    - Execute the tool once");
        println!("  • (n)o     - Cancel the tool execution");
        println!("  • (a)lways - Execute and add to always-allowed list");
        println!("  Tools in 'always_allowed' execute without prompting.");
        println!("  Tools in 'disabled_tools' are blocked completely.");
        println!();
    }

    /// Show available tools
    async fn list_tools(&mut self) {
        let tools = match self.client.list_tools().await {
            Ok(tools) => tools,
            Err(e) => {
                error!("Failed to list tools: {}", e);
                return;
            }
        };
        
        if tools.is_empty() {
            println!("No tools available");
            return;
        }

        println!("Available tools:");
        for tool_name in tools {
            println!("  {}", tool_name);
        }
        println!();
    }

    /// Show available resources
    async fn list_resources(&mut self) {
        let resources = match self.client.list_resources().await {
            Ok(resources) => resources,
            Err(e) => {
                error!("Failed to list resources: {}", e);
                return;
            }
        };
        
        if resources.is_empty() {
            println!("No resources available");
            return;
        }

        println!("Available resources:");
        for resource in resources {
            println!("  {}: {}", resource.uri, resource.description.as_deref().unwrap_or("No description"));
        }
        println!();
    }

    /// Show available prompts
    async fn list_prompts(&mut self) {
        let prompts = match self.client.list_prompts().await {
            Ok(prompts) => prompts,
            Err(e) => {
                error!("Failed to list prompts: {}", e);
                return;
            }
        };
        
        if prompts.is_empty() {
            println!("No prompts available");
            return;
        }

        println!("Available prompts:");
        for prompt_name in prompts {
            println!("  {}", prompt_name);
        }
        println!();
    }

    /// Call a tool with permission checking
    async fn call_tool(&mut self, tool_name: &str, args: Value) -> Result<()> {
        // Check if tool is disabled first - completely block execution
        if self.client.is_tool_disabled(tool_name) {
            let error_msg = format!("Tool '{tool_name}' is disabled for this server");
            error!("Attempted to call disabled tool: {tool_name}");
            return Err(crate::infrastructure::error::ClientError::ToolError(error_msg));
        }

        // Check if tool is in always_allowed - execute immediately
        if self.client.is_tool_always_allowed(tool_name) {
            debug!("Tool '{tool_name}' is always allowed, executing without prompt");
            return self.execute_tool(tool_name, args).await;
        }
        
        // Prompt user for permission
        debug!("Prompting user for permission to execute tool: {tool_name}");
        match self.prompt_user_permission(tool_name, &args).await? {
            PermissionResponse::Execute => {
                info!("User granted one-time permission for tool: {tool_name}");
                self.execute_tool(tool_name, args).await
            },
            PermissionResponse::Always => {
                info!("User granted permanent permission for tool: {tool_name}");
                // Add to always_allowed and execute
                self.add_to_always_allowed(tool_name).await?;
                self.execute_tool(tool_name, args).await
            },
            PermissionResponse::Deny => {
                info!("User denied permission for tool: {tool_name}");
                println!("Tool execution cancelled by user.");
                Ok(())
            }
        }
    }
    
    /// Execute a tool (actual tool calling logic extracted from original call_tool)
    async fn execute_tool(&mut self, tool_name: &str, args: Value) -> Result<()> {
        match self.client.call_tool(tool_name, args).await {
            Ok(result) => {
                println!("Tool result:");
                println!("{}", serde_json::to_string_pretty(&result)?);
                println!();
                Ok(())
            }
            Err(e) => {
                error!("Failed to call tool '{}': {}", tool_name, e);
                Err(e)
            }
        }
    }
    
    /// Check if we should prompt for permission for this tool
    #[allow(dead_code)]
    async fn should_prompt_for_permission(&self, tool_name: &str) -> Result<bool> {
        // Don't prompt if tool is in always_allowed
        Ok(!self.client.is_tool_always_allowed(tool_name))
    }
    
    /// Add a tool to the always_allowed list and persist to database
    async fn add_to_always_allowed(&mut self, tool_name: &str) -> Result<()> {
        self.client.add_tool_to_always_allowed(tool_name).await
    }

    /// Get a resource
    async fn get_resource(&mut self, uri: &str) -> Result<()> {
        match self.client.get_resource(uri).await {
            Ok(content) => {
                println!("Resource: {}", uri);
                if let Some(name) = &content.info.name {
                    println!("Name: {}", name);
                }
                if let Some(desc) = &content.info.description {
                    println!("Description: {}", desc);
                }
                if let Some(mime) = &content.info.mime_type {
                    println!("MIME Type: {}", mime);
                }
                
                // Display the actual content based on encoding
                println!("\nContent:");
                match content.encoding.as_deref() {
                    Some("base64") => {
                        // Decode base64 and try to display as text if it's a text type
                        if let Ok(decoded) = base64::Engine::decode(&base64::engine::general_purpose::STANDARD, &content.data) {
                            if content.info.mime_type.as_deref().unwrap_or("").starts_with("text/") 
                                || content.info.mime_type.as_deref() == Some("application/json") {
                                if let Ok(text) = String::from_utf8(decoded) {
                                    println!("{}", text);
                                } else {
                                    println!("[Binary content - {} bytes]", content.data.len());
                                }
                            } else {
                                println!("[Binary content - {} bytes]", content.data.len());
                            }
                        } else {
                            println!("[Invalid base64 encoding]");
                        }
                    }
                    _ => {
                        // No encoding or unknown encoding - try to display as UTF-8 text
                        if let Ok(text) = String::from_utf8(content.data.clone()) {
                            println!("{}", text);
                        } else {
                            println!("[Binary content - {} bytes]", content.data.len());
                        }
                    }
                }
                println!();
            }
            Err(e) => {
                error!("Failed to get resource '{}': {}", uri, e);
            }
        }
        Ok(())
    }

    /// Get a prompt
    async fn get_prompt(&mut self, name: &str, args: Option<Value>) -> Result<()> {
        match self.client.get_prompt(name, args).await {
            Ok(content) => {
                println!("Prompt content:");
                println!("{}", serde_json::to_string_pretty(&content)?);
                println!();
            }
            Err(e) => {
                error!("Failed to get prompt '{}': {}", name, e);
            }
        }
        Ok(())
    }

    /// Show connection status
    async fn status(&mut self) {
        println!("Connection Status:");
        println!("  Server: {}", self.server_name);
        if let Some(version) = self.client.server_version() {
            println!("  Version: {}", version);
        }
        if let Some(protocol) = self.client.protocol_version() {
            println!("  Protocol: {}", protocol);
        }
        println!("  Connected: {}", self.client.is_connected());
        
        // Get counts asynchronously
        let tools_count = match self.client.list_tools().await {
            Ok(tools) => tools.len(),
            Err(_) => 0,
        };
        let resources_count = match self.client.list_resources().await {
            Ok(resources) => resources.len(),
            Err(_) => 0,
        };
        let prompts_count = match self.client.list_prompts().await {
            Ok(prompts) => prompts.len(),
            Err(_) => 0,
        };
        
        println!("  Tools: {}", tools_count);
        println!("  Resources: {}", resources_count);
        println!("  Prompts: {}", prompts_count);
        println!();
    }
}

#[async_trait]
impl PermissionPrompter for McpRepl {
    async fn prompt_user_permission(&mut self, tool_name: &str, args: &Value) -> Result<PermissionResponse> {
        // Display the tool call information
        println!();
        println!("🔒 Permission Required");
        println!("Tool: {}", tool_name);
        if !args.is_null() && args != &json!({}) {
            println!("Arguments:");
            println!("{}", serde_json::to_string_pretty(args)?);
        }
        println!();
        
        loop {
            let prompt = format!("Execute '{tool_name}' tool? (y)es, (n)o, (a)lways: ");
            match self.editor.readline(&prompt) {
                Ok(input) => {
                    match PermissionResponse::parse_user_input(&input) {
                        Ok(response) => return Ok(response),
                        Err(e) => {
                            println!("Invalid input: {}", e);
                            continue;
                        }
                    }
                }
                Err(ReadlineError::Interrupted) => {
                    println!("Operation cancelled");
                    return Ok(PermissionResponse::Deny);
                }
                Err(ReadlineError::Eof) => {
                    println!("EOF received, cancelling operation");
                    return Ok(PermissionResponse::Deny);
                }
                Err(err) => {
                    error!("Readline error: {:?}", err);
                    return Err(crate::infrastructure::error::ClientError::Client(format!(
                        "Failed to read user input: {err}"
                    )));
                }
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::application::config::ServerProfile;
    use chrono::Utc;
    use serde_json::json;
    use std::sync::Arc;
    use tokio::sync::Mutex;
    
    /// Mock prompter for testing that returns predefined responses
    pub struct MockPrompter {
        responses: Arc<Mutex<Vec<PermissionResponse>>>,
    }
    
    impl MockPrompter {
        pub fn new(responses: Vec<PermissionResponse>) -> Self {
            Self {
                responses: Arc::new(Mutex::new(responses)),
            }
        }
    }
    
    #[async_trait]
    impl PermissionPrompter for MockPrompter {
        async fn prompt_user_permission(&mut self, _tool_name: &str, _args: &Value) -> Result<PermissionResponse> {
            let mut responses = self.responses.lock().await;
            if let Some(response) = responses.pop() {
                Ok(response)
            } else {
                Ok(PermissionResponse::Deny) // Default to deny if no more responses
            }
        }
    }
    
    /// Create a test client with a server profile
    async fn create_test_client_with_profile(always_allowed: Vec<String>, disabled_tools: Vec<String>) -> McpClient {
        let profile = ServerProfile {
            id: uuid::Uuid::new_v4().to_string(),
            name: "test-server".to_string(),
            description: Some("Test server for permission testing".to_string()),
            command: "echo".to_string(),
            args: vec!["test".to_string()],
            environment: None,
            timeout: Some(30),
            is_default: false,
            transport: Some("stdio".to_string()),
            disabled: false,
            always_allowed: Some(always_allowed),
            disabled_tools: Some(disabled_tools),
            created_at: Utc::now(),
            last_used: None,
        };
        
        let mut client = McpClient::new_with_timeout(30).await.unwrap();
        client.set_server_profile(profile);
        client
    }
    
    #[tokio::test]
    async fn test_should_prompt_for_non_always_allowed_tool() {
        // RED: This test should fail because permission checking is not implemented yet
        let client = create_test_client_with_profile(
            vec!["safe_tool".to_string()], // always_allowed
            vec![], // disabled_tools
        ).await;
        
        let mut repl = McpRepl::new(client, "test-server".to_string());
        
        // This tool is NOT in always_allowed, so it should prompt
        let tool_name = "risky_tool";
        
        let should_prompt = repl.should_prompt_for_permission(tool_name).await.unwrap();
        assert!(should_prompt, "Should prompt for non-always-allowed tool");
    }
    
    #[tokio::test]
    async fn test_should_not_prompt_for_always_allowed_tool() {
        // RED: This test should fail because permission checking is not implemented yet
        let client = create_test_client_with_profile(
            vec!["safe_tool".to_string()], // always_allowed
            vec![], // disabled_tools
        ).await;
        
        let mut repl = McpRepl::new(client, "test-server".to_string());
        
        // This tool IS in always_allowed, so it should NOT prompt
        let tool_name = "safe_tool";
        
        let should_prompt = repl.should_prompt_for_permission(tool_name).await.unwrap();
        assert!(!should_prompt, "Should not prompt for always-allowed tool");
    }
    
    #[tokio::test]
    async fn test_should_block_disabled_tools() {
        // RED: This test should fail because permission checking is not implemented yet
        let client = create_test_client_with_profile(
            vec![], // always_allowed
            vec!["blocked_tool".to_string()], // disabled_tools
        ).await;
        
        let mut repl = McpRepl::new(client, "test-server".to_string());
        
        // This tool is disabled, so calling it should return an error
        let tool_name = "blocked_tool";
        let args = json!({"param": "value"});
        
        let result = repl.call_tool(tool_name, args).await;
        assert!(result.is_err(), "Should return error for disabled tool");
        
        let error_msg = result.unwrap_err().to_string();
        assert!(error_msg.contains("disabled"), "Error should mention tool is disabled");
    }
    
    #[tokio::test]
    async fn test_user_response_parsing() {
        // RED: This test should fail because response parsing is not implemented yet
        
        // Test 'y' response
        let response = PermissionResponse::parse_user_input("y").unwrap();
        assert_eq!(response, PermissionResponse::Execute);
        
        // Test 'yes' response
        let response = PermissionResponse::parse_user_input("yes").unwrap();
        assert_eq!(response, PermissionResponse::Execute);
        
        // Test 'n' response
        let response = PermissionResponse::parse_user_input("n").unwrap();
        assert_eq!(response, PermissionResponse::Deny);
        
        // Test 'no' response
        let response = PermissionResponse::parse_user_input("no").unwrap();
        assert_eq!(response, PermissionResponse::Deny);
        
        // Test 'always' response
        let response = PermissionResponse::parse_user_input("always").unwrap();
        assert_eq!(response, PermissionResponse::Always);
        
        // Test 'a' response
        let response = PermissionResponse::parse_user_input("a").unwrap();
        assert_eq!(response, PermissionResponse::Always);
        
        // Test invalid response
        let result = PermissionResponse::parse_user_input("invalid");
        assert!(result.is_err(), "Should return error for invalid input");
    }
    
    #[tokio::test]
    async fn test_add_to_always_allowed_persists() {
        // RED: This test should fail because always_allowed management is not implemented yet
        let client = create_test_client_with_profile(
            vec!["existing_tool".to_string()], // always_allowed
            vec![], // disabled_tools
        ).await;
        
        let mut repl = McpRepl::new(client, "test-server".to_string());
        
        // Add a new tool to always_allowed
        let tool_name = "new_safe_tool";
        let result = repl.add_to_always_allowed(tool_name).await;
        assert!(result.is_ok(), "Should successfully add tool to always_allowed");
        
        // Verify it's now in always_allowed (should not prompt)
        let should_prompt = repl.should_prompt_for_permission(tool_name).await.unwrap();
        assert!(!should_prompt, "Tool should now be in always_allowed");
    }
    
    #[tokio::test]
    async fn test_permission_workflow_with_mock_prompter() {
        // RED: This test should fail because permission workflow is not implemented yet
        let client = create_test_client_with_profile(
            vec![], // always_allowed (empty)
            vec![], // disabled_tools (empty)
        ).await;
        
        let mut repl = McpRepl::new(client, "test-server".to_string());
        
        // Test user accepts execution
        let mut mock_prompter = MockPrompter::new(vec![PermissionResponse::Execute]);
        let tool_name = "test_tool";
        let args = json!({"param": "value"});
        
        let result = repl.call_tool_and_prompter(tool_name, args.clone(), &mut mock_prompter).await;
        assert!(result.is_ok(), "Should succeed when user accepts");
        
        // Test user denies execution
        let mut mock_prompter = MockPrompter::new(vec![PermissionResponse::Deny]);
        let result = repl.call_tool_and_prompter(tool_name, args.clone(), &mut mock_prompter).await;
        assert!(result.is_ok(), "Should succeed (but skip execution) when user denies");
        
        // Test user chooses always
        let mut mock_prompter = MockPrompter::new(vec![PermissionResponse::Always]);
        let result = repl.call_tool_and_prompter(tool_name, args, &mut mock_prompter).await;
        assert!(result.is_ok(), "Should succeed when user chooses always");
        
        // Verify tool is now in always_allowed (should not prompt next time)
        let should_prompt = repl.should_prompt_for_permission(tool_name).await.unwrap();
        assert!(!should_prompt, "Tool should now be in always_allowed after user chose 'always'");
    }
    
    impl McpRepl {
        /// Test helper method to call tool with mock prompter (mocks execution for testing)
        pub async fn call_tool_and_prompter(
            &mut self,
            tool_name: &str,
            args: Value,
            prompter: &mut dyn PermissionPrompter,
        ) -> Result<()> {
            // Check if tool is disabled first - completely block execution
            if self.client.is_tool_disabled(tool_name) {
                let error_msg = format!("Tool '{tool_name}' is disabled for this server");
                return Err(crate::infrastructure::error::ClientError::ToolError(error_msg));
            }

            // Check if tool is in always_allowed - execute immediately
            if self.client.is_tool_always_allowed(tool_name) {
                // Mock successful execution for testing
                debug!("Mock execution: tool '{}' executed successfully", tool_name);
                return Ok(());
            }

            // Use provided prompter instead of built-in prompt
            match prompter.prompt_user_permission(tool_name, &args).await? {
                PermissionResponse::Execute => {
                    // Mock successful execution for testing
                    debug!("Mock execution: tool '{}' executed successfully", tool_name);
                    Ok(())
                }
                PermissionResponse::Always => {
                    // Add to always_allowed and execute
                    self.add_to_always_allowed(tool_name).await?;
                    // Mock successful execution for testing
                    debug!("Mock execution: tool '{}' executed successfully", tool_name);
                    Ok(())
                }
                PermissionResponse::Deny => {
                    debug!("Tool execution cancelled by user.");
                    Ok(())
                }
            }
        }
    }

}