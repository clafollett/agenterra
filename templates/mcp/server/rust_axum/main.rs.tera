//! Main entry point for the generated Axum MCP server

// Internal modules
mod common;
mod config;
mod handlers;
mod server;
mod signal;
mod transport;

// Internal imports (std, crate)
use crate::config::Config;
use crate::transport::Transport;
use std::sync::Arc;
use tokio::sync::Mutex;

// External imports (alphabetized)
use clap::Parser;
use log::debug;
use tracing_appender::non_blocking::{NonBlocking, WorkerGuard};
use tracing_appender::rolling::{RollingFileAppender, Rotation};
use tracing_subscriber::fmt::writer::MakeWriterExt;

/// {{ project_name }} MCP Server
/// 
/// Supports both STDIO and SSE (Server-Sent Events) transports for MCP protocol
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Transport type to use (stdio or sse)
    #[arg(short, long, value_enum, default_value_t = Transport::Stdio)]
    transport: Transport,

    /// SSE server bind address
    #[arg(long, default_value = "127.0.0.1:{{ server_port | default(value=8080) }}")]
    sse_addr: String,

    /// SSE keep-alive interval in seconds
    #[arg(long, default_value = "30")]
    sse_keep_alive: u64,

    /// Log directory path
    #[arg(long, default_value = "logs")]
    log_dir: String,

    /// API URL for backend services
    #[arg(long, default_value = "{{ base_api_url }}")]
    api_url: String,
    
    /// Optional configuration file path (TOML format)
    #[arg(long, short = 'c')]
    config_file: Option<String>,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    debug!("[{{ project_name }} MCP] main() reached ===");

    // Parse command line arguments
    let args = Args::parse();

    // Build configuration from command-line arguments
    let mut config = if let Some(config_path) = &args.config_file {
        // Load from config file if specified
        let contents = std::fs::read_to_string(config_path)
            .map_err(|e| format!("Failed to read config file '{}': {}", config_path, e))?;
        toml::from_str::<Config>(&contents)
            .map_err(|e| format!("Failed to parse config file '{}': {}", config_path, e))?
    } else {
        // Use defaults
        Config::default()
    };
    
    // Command-line arguments always override config file settings
    config.transport = args.transport;
    config.api_url = args.api_url;
    config.log_dir = std::path::PathBuf::from(args.log_dir);
    
    // Parse and apply SSE address
    config.sse_addr = args.sse_addr.parse()
        .map_err(|e| {
            eprintln!("Invalid SSE address '{}': {}", args.sse_addr, e);
            eprintln!("Using default address: 127.0.0.1:{{ server_port | default(value=8080) }}");
        })
        .unwrap_or_else(|_| {
            "127.0.0.1:{{ server_port | default(value=8080) }}"
                .parse()
                .expect("Default SSE address should be valid")
        });
    
    config.sse_keep_alive = std::time::Duration::from_secs(args.sse_keep_alive);

    let cfg = Arc::new(Mutex::new(config));

    // Get log directory from config
    let log_dir = {
        let cfg_guard = cfg.lock().await;
        cfg_guard.log_dir.clone()
    };

    // Create log directory after releasing the lock
    std::fs::create_dir_all(&log_dir)?;

    // === Dual Logging Setup (configurable) ===
    // 1. File logger (daily rotation, async non-blocking)
    let file_appender = RollingFileAppender::new(
        Rotation::DAILY,
        &log_dir,
        "{{ project_name }}-mcp.log",
    );
    let (file_writer, file_guard): (NonBlocking, WorkerGuard) =
        tracing_appender::non_blocking(file_appender);

    // 2. Stderr logger (async non-blocking)
    let (stderr_writer, stderr_guard): (NonBlocking, WorkerGuard) =
        tracing_appender::non_blocking(std::io::stderr());
    // IMPORTANT: Keep file_guard and stderr_guard alive for the duration of main() to prevent premature shutdown of logging and stdio, especially in Docker or MCP stdio mode.

    // 3. Combine writers using .and()
    let multi_writer = file_writer.and(stderr_writer);

    tracing_subscriber::fmt()
        .json()
        .with_writer(multi_writer)
        .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
        .init();

    debug!("[{{ project_name }} MCP] After tracing_subscriber setup");

    // Run unified server orchestrator (handles transport, hot reload, shutdown)
    server::start(cfg.clone(), file_guard, stderr_guard).await
}
