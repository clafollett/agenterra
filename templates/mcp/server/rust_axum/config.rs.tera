//! Configuration module for the generated server

// Internal imports (std, crate)
use crate::transport::Transport;
use std::env;
use std::path::PathBuf;
use std::time::Duration;
use tracing::{debug, info};

/// Server configuration
#[derive(Clone, Debug)]
pub struct Config {
    /// Log directory
    pub log_dir: PathBuf,
    /// Base API URL
    pub api_url: String,
    /// Transport type (stdio or sse)
    pub transport: Transport,
    /// SSE server address
    pub sse_addr: std::net::SocketAddr,
    /// SSE keep alive duration
    pub sse_keep_alive: Duration,
}

impl Config {
    /// Load configuration from environment variables
    pub fn load() -> Self {
        debug!("Loading server configuration from environment variables");
        let log_dir = env::var("LOG_DIR")
            .map(PathBuf::from)
            .unwrap_or_else(|_| {
                // Default to logs directory next to the executable
                if let Ok(exe_path) = std::env::current_exe() {
                    if let Some(exe_dir) = exe_path.parent() {
                        return exe_dir.join("logs");
                    }
                }
                // Fallback to current directory if we can't determine executable path
                PathBuf::from("logs")
            });
            
        let api_url = env::var("API_URL")
            .unwrap_or_else(|_| "{{ base_api_url }}".to_string());
            
        let transport = env::var("TRANSPORT")
            .ok()
            .and_then(|s| s.parse::<Transport>().ok())
            .unwrap_or(Transport::Stdio);
            
        let sse_addr = env::var("SSE_ADDR")
            .unwrap_or_else(|_| "127.0.0.1:{{ server_port | default(value=8080) }}".to_string())
            .parse()
            .unwrap_or_else(|_| "127.0.0.1:{{ server_port | default(value=8080) }}".parse()
                .expect("Default SSE address should be valid"));
            
        let sse_keep_alive = env::var("SSE_KEEP_ALIVE")
            .ok()
            .and_then(|s| s.parse().ok())
            .map(Duration::from_secs)
            .unwrap_or_else(|| Duration::from_secs(30));
            
        let config = Self {
            log_dir,
            api_url,
            transport,
            sse_addr,
            sse_keep_alive,
        };
        
        info!("Server configuration loaded: api_url={}, transport={}, sse_addr={}", 
              config.api_url, config.transport, config.sse_addr);
        config
    }
}

impl Default for Config {
    fn default() -> Self {
        let log_dir = if let Ok(exe_path) = std::env::current_exe() {
            if let Some(exe_dir) = exe_path.parent() {
                exe_dir.join("logs")
            } else {
                PathBuf::from("logs")
            }
        } else {
            PathBuf::from("logs")
        };
        
        Self {
            log_dir,
            api_url: "{{ base_api_url }}".to_string(),
            transport: Transport::Stdio,
            sse_addr: "127.0.0.1:{{ server_port | default(value=8080) }}".parse()
                .expect("Default SSE address should be valid"),
            sse_keep_alive: Duration::from_secs(30),
        }
    }
}
