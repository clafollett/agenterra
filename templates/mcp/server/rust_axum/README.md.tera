# {{ project_name | default(value="MCP Server") }}

MCP (Model Context Protocol) server implementation using Rust and Axum.

## Features

- **HTTP Server**: Axum-based HTTP server with SSE (Server-Sent Events) support
- **MCP Protocol**: Full Model Context Protocol implementation using rmcp
- **Tool Support**: Define and expose tools for AI model interaction
- **Resource Management**: Serve resources with proper URI handling
- **Prompt Templates**: Support for dynamic prompt templates
- **Authentication**: OAuth2 authentication support via rmcp auth feature
- **Real-time Communication**: SSE for real-time bidirectional communication
- **Signal Handling**: Graceful shutdown with proper signal handling

## Usage

### Basic Usage

```bash
# Start the server
cargo run

# Start with custom port
cargo run -- --port 8080

# Start with debug logging
RUST_LOG=debug cargo run
```

### Configuration

The server supports the following command-line options:

- `--port <PORT>` - Server port (default: 3000)
- `--host <HOST>` - Server host (default: 127.0.0.1)

### Environment Variables

- `RUST_LOG` - Log level (debug, info, warn, error)
- `MCP_SERVER_PORT` - Override server port
- `MCP_SERVER_HOST` - Override server host

## API Endpoints

### MCP Protocol Endpoints

- `POST /mcp/sse` - Server-Sent Events endpoint for MCP communication
- `GET /health` - Health check endpoint
- `GET /schema` - OpenAPI schema endpoint

### Development Endpoints

- `GET /docs` - Swagger UI documentation (development only)

## Implementation

### Adding Tools

Tools are defined in `src/handlers/` and registered in `src/main.rs`:

```rust
use rmcp::prelude::*;

#[tool]
async fn my_tool(
    #[description("Input parameter")] input: String,
) -> Result<String, Box<dyn std::error::Error + Send + Sync>> {
    Ok(format!("Processed: {}", input))
}
```

### Adding Resources

Resources are managed through the MCP protocol and can represent files, databases, or any accessible data:

```rust
use rmcp::prelude::*;

async fn list_resources() -> Vec<Resource> {
    vec![
        Resource {
            uri: "file:///example.txt".to_string(),
            name: Some("Example File".to_string()),
            description: Some("An example resource".to_string()),
            mime_type: Some("text/plain".to_string()),
        }
    ]
}
```

### Adding Prompts

Prompt templates can be defined for dynamic content generation:

```rust
use rmcp::prelude::*;

async fn get_prompt(name: &str, args: &serde_json::Value) -> Option<PromptMessage> {
    match name {
        "example" => Some(PromptMessage {
            role: MessageRole::User,
            content: MessageContent::Text("Example prompt".to_string()),
        }),
        _ => None,
    }
}
```

## Dependencies

- **rmcp**: MCP protocol implementation
- **axum**: HTTP web framework
- **tokio**: Async runtime
- **serde**: Serialization support
- **schemars**: JSON schema generation
- **tracing**: Logging and instrumentation
- **signal-hook**: Signal handling for graceful shutdown

## Publishing Limitation

⚠️ **Important**: This project uses git dependencies and cannot be published to crates.io in its current form.

The `rmcp` dependency is referenced directly from the official ModelContextProtocol GitHub repository to ensure access to the latest features (including authentication support). To publish this project to crates.io, you would need to:

1. Wait for an official `rmcp` release on crates.io that includes the `auth` feature
2. Or remove features that require git dependencies
3. Or vendor the dependencies locally

This limitation ensures you have access to the full, official MCP SDK functionality during development.

## Development

### Building

```bash
cargo build
```

### Running Tests

```bash
cargo test
```

### Formatting

```bash
cargo fmt
```

### Linting

```bash
cargo clippy
```

### Running with Hot Reload

For development, you can use `cargo watch`:

```bash
cargo install cargo-watch
cargo watch -x run
```

## Production Deployment

### Building Release Binary

```bash
cargo build --release
```

### Docker Deployment

Create a `Dockerfile`:

```dockerfile
FROM rust:1.70 as builder
WORKDIR /app
COPY . .
RUN cargo build --release

FROM debian:bookworm-slim
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*
COPY --from=builder /app/target/release/{{ project_name | default(value="mcp_server") }} /usr/local/bin/server
EXPOSE 3000
CMD ["server"]
```

### Environment Configuration

For production, consider:

- Setting appropriate `RUST_LOG` levels
- Configuring proper error handling
- Setting up monitoring and metrics
- Implementing rate limiting
- Adding authentication middleware

## License

This project is licensed under the MIT License.