//! Transport types for {{ project_name }} server

use clap::ValueEnum;
use serde::{Deserialize, Serialize};

/// Transport mechanism for MCP protocol communication
#[derive(Debug, Clone, Copy, PartialEq, Eq, ValueEnum, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum Transport {
    /// Standard input/output (STDIO) transport - default for local processes
    #[value(name = "stdio")]
    Stdio,
    
    /// Server-Sent Events (SSE) transport - for HTTP-based communication
    #[value(name = "sse")]
    Sse,
}

impl Transport {
    /// Check if this transport is STDIO
    pub fn is_stdio(&self) -> bool {
        matches!(self, Transport::Stdio)
    }
    
    /// Check if this transport is SSE
    pub fn is_sse(&self) -> bool {
        matches!(self, Transport::Sse)
    }
}

impl Default for Transport {
    fn default() -> Self {
        Transport::Stdio
    }
}

impl std::fmt::Display for Transport {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Transport::Stdio => write!(f, "stdio"),
            Transport::Sse => write!(f, "sse"),
        }
    }
}

impl std::str::FromStr for Transport {
    type Err = String;
    
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.to_lowercase().as_str() {
            "stdio" => Ok(Transport::Stdio),
            "sse" => Ok(Transport::Sse),
            _ => Err(format!("Invalid transport: '{}'. Valid options are: stdio, sse", s)),
        }
    }
}