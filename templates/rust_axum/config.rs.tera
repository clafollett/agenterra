//! Configuration module for the generated server

// Internal imports (std, crate)
use std::env;
use std::path::PathBuf;
use std::time::Duration;

/// Server configuration
#[derive(Clone, Debug)]
pub struct Config {
    /// Server port
    pub port: u16,
    /// Log directory
    pub log_dir: PathBuf,
    /// Log file name
    pub log_file: String,
    /// Base API URL
    pub api_url: String,
    /// Transport type (stdio or sse)
    pub transport: String,
    /// SSE server address
    pub sse_addr: std::net::SocketAddr,
    /// SSE keep alive duration
    pub sse_keep_alive: Duration,
}

impl Config {
    /// Load configuration from environment variables
    pub fn load() -> Self {
        let port = env::var("PORT")
            .ok()
            .and_then(|p| p.parse().ok())
            .unwrap_or({{ server_port | default(value=8080) }});
            
        let log_dir = env::var("LOG_DIR")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("logs"));
            
        let log_file = env::var("LOG_FILE")
            .unwrap_or_else(|_| "{{ log_file | default(value="{{ project_name }}-mcp.log") }}".to_string());
            
        let api_url = env::var("API_URL")
            .unwrap_or_else(|_| "https://api.example.com".to_string());
            
        let transport = env::var("TRANSPORT")
            .unwrap_or_else(|_| "stdio".to_string());
            
        let sse_addr = env::var("SSE_ADDR")
            .unwrap_or_else(|_| "127.0.0.1:8080".to_string())
            .parse()
            .unwrap_or_else(|_| "127.0.0.1:8080".parse().unwrap());
            
        let sse_keep_alive = env::var("SSE_KEEP_ALIVE")
            .ok()
            .and_then(|s| s.parse().ok())
            .map(Duration::from_secs)
            .unwrap_or_else(|| Duration::from_secs(30));
            
        Self {
            port,
            log_dir,
            log_file,
            api_url,
            transport,
            sse_addr,
            sse_keep_alive,
        }
    }
}

impl Default for Config {
    fn default() -> Self {
        Self {
            port: {{ server_port | default(value=8080) }},
            log_dir: PathBuf::from("logs"),
            log_file: "{{ log_file | default(value="{{ project_name }}-mcp.log") }}".to_string(),
            api_url: "https://api.example.com".to_string(),
            transport: "stdio".to_string(),
            sse_addr: "127.0.0.1:8080".parse().unwrap(),
            sse_keep_alive: Duration::from_secs(30),
        }
    }
}
